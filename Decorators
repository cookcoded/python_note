
'''Counting Function Calls with Decorators'''


def call_counter(func):
    def helper(x):
        helper.calls += 1
        return func(x)
    helper.calls = 0

    return helper

@call_counter
def succ(x):
    return x + 1

print(succ.calls)
for i in range(10):
    succ(i)
    
print(succ.calls)



'''Decorators with Parameters'''


def evening_greeting(func):
    def function_wrapper(x):
        print("Good evening, " + func.__name__ + " returns:")
        func(x)
    return function_wrapper

def morning_greeting(func):
    def function_wrapper(x):
        print("Good morning, " + func.__name__ + " returns:")
        func(x)
    return function_wrapper

@evening_greeting
def foo(x):
    print(42)

foo("Hi")

'''Using wraps from functools
wraps can save the original attributes of the function f,'''


from functools import wraps
def greeting(func):
    @wraps(func)
    def function_wrapper(x):
        """ function_wrapper of greeting """
        print("Hi, " + func.__name__ + " returns:")
        return func(x)
    return function_wrapper
    
f(10)
print("function name: " + f.__name__)
print("docstring: " + f.__doc__)
print("module name: " + f.__module__)


'''
Classes instead of Functions
The __call__ method is called, when the instance is called "like a function"
'''


class decorator2:
    
    def __init__(self, f):
        self.f = f
        
    def __call__(self):
        print("Decorating", self.f.__name__)
        self.f()

@decorator2
def foo():
    print("inside foo()")

foo()


"""Method decorator"""
def log(mth):
    def wrapper(self, *args, **kwargs):
        print(self, args, kwargs)
        return mth(self, *args, **kwargs)
    return wrapper

class Some:
    @log
    def doIt(self, a, b):
        return a + b

s = Some()
print(s.doIt(1, 2))
